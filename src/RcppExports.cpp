// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gaussianMixEM
Rcpp::List gaussianMixEM(const arma::vec& X, int k, int max_iter, double tol);
RcppExport SEXP _code815_gaussianMixEM(SEXP XSEXP, SEXP kSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussianMixEM(X, k, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// gradient_descent_lsq
Rcpp::List gradient_descent_lsq(const arma::vec& y, const arma::mat& A, const arma::vec& x0, double lambda, double gamma, double tol, int max_iter, bool printing);
RcppExport SEXP _code815_gradient_descent_lsq(SEXP ySEXP, SEXP ASEXP, SEXP x0SEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP tolSEXP, SEXP max_iterSEXP, SEXP printingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type printing(printingSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_descent_lsq(y, A, x0, lambda, gamma, tol, max_iter, printing));
    return rcpp_result_gen;
END_RCPP
}
// loss_ridge
double loss_ridge(const arma::vec& y, const arma::mat& A, const arma::vec& x, double lambda);
RcppExport SEXP _code815_loss_ridge(SEXP ySEXP, SEXP ASEXP, SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(loss_ridge(y, A, x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// stochastic_gradient_descent_lsq
Rcpp::List stochastic_gradient_descent_lsq(const arma::vec& y, const arma::mat& A, const arma::vec& x0, double lambda, int batch, double initial_step_size, double tol, int max_iter, bool printing);
RcppExport SEXP _code815_stochastic_gradient_descent_lsq(SEXP ySEXP, SEXP ASEXP, SEXP x0SEXP, SEXP lambdaSEXP, SEXP batchSEXP, SEXP initial_step_sizeSEXP, SEXP tolSEXP, SEXP max_iterSEXP, SEXP printingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< double >::type initial_step_size(initial_step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type printing(printingSEXP);
    rcpp_result_gen = Rcpp::wrap(stochastic_gradient_descent_lsq(y, A, x0, lambda, batch, initial_step_size, tol, max_iter, printing));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_code815_gaussianMixEM", (DL_FUNC) &_code815_gaussianMixEM, 4},
    {"_code815_gradient_descent_lsq", (DL_FUNC) &_code815_gradient_descent_lsq, 8},
    {"_code815_loss_ridge", (DL_FUNC) &_code815_loss_ridge, 4},
    {"_code815_stochastic_gradient_descent_lsq", (DL_FUNC) &_code815_stochastic_gradient_descent_lsq, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_code815(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
